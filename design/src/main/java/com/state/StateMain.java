package com.state;

/**
 * 状态模式： 结构与策略模式相同
 * 根据不同的状态，执行不同的处理方式， 状态模式可以更改上下文中的状态，而策略模式不能
 * 状态模式把受环境改变的对象行为包装在不同的状态对象里，其意图是让一个对象在其内部状态改变的时候，其行为也随之改变
 * 通常在以下情况下可以考虑使用状态模式。
 * 1.当一个对象的行为取决于它的状态，并且它必须在运行时根据状态改变它的行为时，就可以考虑使用状态模式。
 * 2.一个操作中含有庞大的分支结构，并且这些分支决定于对象的状态时。
 *
 * 状态模式和策略模式的 UML 类图架构几乎完全一样，但两者的应用场景是不一样的。
 * 策略模式的多种算法行为择其一都能满足，彼此之间是独立的，用户可自行更换策略算法，
 * 而状态模式的各个状态间存在相互关系，彼此之间在一定条件下存在自动切换状态的效果，并且用户无法指定状态，只能设置初始状态。
 *
 */
public class StateMain {
    public static void main(String[] args) {
        Context context = new Context(new StateB());

        context.handle();
        context.handle();
    }
}
